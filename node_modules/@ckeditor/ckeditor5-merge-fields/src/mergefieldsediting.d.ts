/**
 * @license Copyright (c) 2003-2024, CKSource Holding sp. z o.o. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
import { Plugin, type Editor } from 'ckeditor5/src/core.js';
import type { MergeFieldDefinition, MergeFieldType } from './mergefieldsconfig.js';
/**
 * The merge fields editing feature.
 */
export default class MergeFieldsEditing extends Plugin {
    licenseKey: string;
    /**
     * The current preview mode for merge fields. Determines the merge field values displayed in the editor.
     *
     * @observable
     */
    previewMode: string;
    /**
     * All configured preview modes, available to be set as a value for {@link #previewMode}.
     */
    readonly availablePreviewModes: Array<string>;
    /**
     * A flat list of all merge field definitions.
     */
    flattenedMergeFieldDefinitions: Array<MergeFieldDefinition>;
    /**
     * @inheritDoc
     */
    static get pluginName(): "MergeFieldsEditing";
    /**
     * @inheritDoc
     */
    static get isOfficialPlugin(): true;
    /**
     * @inheritDoc
     */
    static get isPremiumPlugin(): true;
    /**
     * @inheritDoc
     */
    constructor(editor: Editor);
    /**
     * @inheritDoc
     */
    init(): void;
    /**
     * Returns an object with default merge fields values.
     *
     * Custom merge fields (created by user, not defined in the config) will be returned as well, and their value will be set to `null`.
     *
     * Values defined as functions are evaluated and their result is returned.
     */
    getDefaultValues(): MergeFieldsValues;
    /**
     * Returns an object with merge fields values defined for given data set.
     *
     * Custom merge fields (created by user, not defined in the config) will be returned as well, and their value will be set to `null`.
     *
     * Values defined as functions are evaluated and their result is returned.
     *
     * If the data set is not found, it throws an error.
     *
     * @param dataSetId
     * @param useDefaultValues If set to `true`, merge field default value will be used for these merge fields, for which the data
     * was not defined. If default value is not configured for given merge field, `null` will be still returned.
     */
    getDataSetValues(dataSetId: string, useDefaultValues?: boolean): MergeFieldsValues;
    /**
     * Retrieves the label for the merge field with the given id.
     *
     * If the merge field definition for given id was not found, or a label was not specified, the merge field id is returned instead.
     */
    getLabel(id: string): string;
    /**
     * Returns the default value for the merge field with the given id.
     *
     * If the merge field default value was specified as a callback, it will be executed and the result will be returned.
     *
     * If the merge field definition for given id was not found, or a default value was not specified, `null` is returned.
     */
    getMergeFieldDefaultValue(id: string): string | null;
    /**
     * Returns the value specified for merge field with the given in given data set.
     *
     * If the merge field value was specified as a callback, it will be executed and the result will be returned.
     *
     * If the merge field definition for given id was not found, or the data set has no value for this merge field, `null` is returned.
     */
    getMergeFieldValue(id: string, dataSetId: string): string | null;
    /**
     * Returns the type of the merge field with the given id.
     *
     * Possible values are: `text`, `block`, `image`.
     */
    getMergeFieldType(id: string): MergeFieldType;
    /**
     * Returns ids of all merge fields that are present in the document.
     */
    getDocumentMergeFieldsIds(): Array<string>;
    /**
     * Returns ids of all merge fields defined in the configuration and custom merge fields added by the user that exist in the document.
     */
    getMergeFieldsIds(): Array<string>;
    /**
     * Returns the merge field definition for the given id.
     */
    getDefinition(id: string): MergeFieldDefinition | null;
    /**
     * @inheritDoc
     */
    destroy(): void;
}
type MergeFieldsValues = Record<string, string | null>;
export {};
